Terminals:
( ) none , and or not true false + - * / % = < > ! is in " ' [ ] { } for : # if elif else while break continue pass def return range raise class from import as * with open
Variables:
SS ALPHABET NUM ETC OPER SQ ALPHANUM STRING_WORD VAR_FIRST VAR CONTENT VV BOOLEAN OP EXPRESS COMPARRISON STRING ARRAY DICT_CONTENT DICT BODY COMMENT IF_HEADER IF ELIF_HEADER ELIF WHILE FOR FOR_VAR ITERABLE ITERATE CONTINUE BREAK pass DEF_HEADER DEF_S DEF RETURN FUNC_BODY IF_FUNC ELIF_FUNC ELSE_FUNC WHILE_FUNC FOR_FUNC WITH_FUNC ITERATE_FUNC BREAK_FUNC CONTINUE_FUNC RAISE CLASS CLASS_HEADER CLASS_S IMP_S IMPORT WITH
Productions:
SS -> SS SS | IF | WHILE | FOR | CLASS | DEF | IMPORT | RAISE | COMMENT | BREAK | CONTINUE | WITH | VAR = VV | VAR OP = VV | none;
ALPHABET -> A | a | B | b | C | c | D | d | E | e | F | f | G | g | H | h | I | i | J | j | K | k | L | l | M | m | N | n | O | o | P | p | Q | q | R | r | S | s | T | t | U | u | V | v | W | w | X | x | Y | y | Z | z;
NUM -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | NUM NUM;
ETC -> $ | & | . | ? | @ | \ | ^ | ` | ~ | |;
OPER -> + | - | * | / / | * * | / | %;
SQ -> < | >;
STRING -> STRING STRING | " STRING_WORD " | ' STRING_WORD ';
ARRAY -> [ VV ] | [ ] | [ VV for VAR in VV ] | [ VV for VAR in RANGE ];
DICT -> { } | { DICT_CONTENT };
DICT_CONTENT -> VV : VV | DICT_CONTENT , DICT_CONTENT;
BODY -> STRING_WORD | BODY BODY;
COMMENT -> " " " BODY " " " | ' ' ' BODY ' ' ' | # BODY;
IF_HEADER -> if EXPRESS :;
IF -> IF_HEADER SS | IF ELIF | IF else : SS;
ELIF_HEADER -> elif EXPRESS :;
ELIF -> ELIF_HEADER SS | ELIF ELIF | ELIF else : SS;
WHILE -> while EXPRESS : SS;
FOR_VAR -> VAR | VAR , FOR_VAR;
ITERABLE -> range ( VV ) | ( DICT ) | DICT | ( ARRAY ) | ARRAY | STRING;
FOR -> for FOR_VAR in ITERABLE : SS;
ITERATE -> for FOR_VAR in ITERABLE : | while EXPRESS : | FOR | WHILE;
BREAK -> ITERATE break | ITERATE break SS;
CONTINUE -> ITERATE continue | ITERATE continue SS;
DEF_HEADER -> def VAR ( VV ) : | def VAR ( ) :;
DEF_S -> DEF_S DEF_S | FUNC_BODY;
FUNC_BODY -> FUNC_BODY FUNC_BODY | IF_FUNC | FOR_FUNC | WHILE_FUNC | CONTINUE_FUNC | BREAK_FUNC | CLASS | DEF | VAR = VV | VAR OP = VV | IMPORT | RAISE | WITH_FUNC | pass | RETURN | COMMENT | none;
DEF -> DEF_HEADER DEF_S | DEF_HEADER FUNC_BODY;
RETURN -> return BOOLEAN | return VV | return;
IF_FUNC -> IF_HEADER FUNC_BODY | IF_FUNC ELIF_FUNC | IF_FUNC ELSE_FUNC;
ELIF_FUNC -> ELIF_HEADER FUNC_BODY | ELIF_FUNC ELIF_FUNC | ELIF_FUNC ELSE_FUNC;
ELSE_FUNC -> else : SS : FUNC_BODY;
FOR_FUNC -> for FOR_VAR in ITERABLE : FUNC_BODY;
WHILE_FUNC -> while EXPRESS : FUNC_BODY;
ITERATE_FUNC -> FOR_FUNC | WHILE_FUNC | while EXPRESS : | for FOR_VAR in ITERABLE :;
CONTINUE_FUNC -> ITERATE_FUNC continue | ITERATE_FUNC continue FUNC_BODY;
BREAK_FUNC -> ITERATE_FUNC break | ITERATE_FUNC break FUNC_BODY;
WITH_FUNC -> with open ( VV ) as VAR : FUNC_BODY;
RAISE -> raise ( VV ) | raise ( );
CLASS_HEADER -> class VAR : | class VAR ( VV ) : | class VAR ( ) :;
CLASS_S -> CLASS_S CLASS_S | IF | WHILE | FOR | CLASS | DEF | VAR = VV | VAR OP = VV | BREAK | CONTINUE | pass | COMMENT;
CLASS -> CLASS_HEADER CLASS_S;
IMPORT -> from VAR import IMP_S | import VAR as VAR | import VAR;
IMP_S -> * | VAR as VAR | VAR;
VAR_FIRST -> ALPHABET | _;
ALPHANUM -> ALPHANUM ALPHANUM | NUM | VAR_FIRST;
VAR -> VAR_FIRST ALPHANUM | VAR_FIRST;
STRING_WORD -> STRING_WORD STRING_WORD | ALPHABET | NUM | ETC | = | OPER | SQ = | = = | ! = | SQ | : | , | ' | " | ( | ) | and | or | none | not | true | false | { | } | ] | [ | is | in | for | # | if | elif | else | while | break | continue | pass | def | return | range | raise | class | from | import | with | open | as;
CONTENT -> NUM | BOOLEAN | STRING | ARRAY | DICT | VV OP VV | ( VV ) | none;
VV -> VV , VV | CONTENT | VAR;
BOOLEAN -> true | false | BOOLEAN and BOOLEAN | BOOLEAN or BOOLEAN | not BOOLEAN | VV is VV | VV COMPARRISON VV;
EXPRESS -> BOOLEAN | ( BOOLEAN );
COMPARRISON -> SQ = | = = | ! = | SQ | is | is not | in | not in;
WITH -> with open ( VV ) as VAR : SS