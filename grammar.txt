Terminals:
( ) none , and or not true false + - * / % = < > ! is in " ' [ ] { } for : # if elif else while break continue pass def return range raise class from import as with
Variables:
SS ALPHABET NUM OTHER SYNTAX ALPHANUM STRING_WORD VAR_FIRST VAR VALUE NUMBER VV BOOLEAN OP EXPRESSION RELATION STRING ARRAY DICT_CONTENT DICT COMMENT IF_HEADER IF ELIF_HEADER ELIF ELSE WHILE WHILE_HEADER FOR_HEADER FOR FOR_VAR ITERABLE ITERATE CONTINUE BREAK PASS DEF_HEADER DEF_S DEF RETURN FUNC_BODY IF_FUNC ELIF_FUNC ELSE_FUNC WHILE_FUNC FOR_FUNC WITH_FUNC ITERATE_FUNC BREAK_FUNC CONTINUE_FUNC RAISE CLASS CLASS_HEADER CLASS_S IMP_S IMPORT WITH WITH_HEADER FUNCTION TRUEX FALSEX NOTX IFS ELIFX ELSEX WHILEX BREAKX CONTINUEX DEFX RETURN RANGEX RAISES CLASSS FROMS IMPORTS ASS WITHS
Productions:
SS -> SS SS | IF | WHILE | FOR | CLASS | DEF | IMPORT | RAISE | COMMENT | BREAK | FUNCTION | CONTINUE | WITH | PASS | VAR = VV | VAR OP = VV | none;
ALPHABET -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z;
NUM -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
OTHER -> $ | & | . | ? | @ | \ | ^ | ` | ~ | ! | # | % | ( | ) | * | + | - | , | / | : | < | = | > | [ | ] | _ | { | } | |;
SYNTAX -> none | and | or | is | in | TRUEX | FALSEX | NOTX | for | IFS | ELIFX | ELSEX | WHILEX | BREAKX | CONTINUEX | DEFX | RETURN | RANGEX | RAISES | CLASSS | FROMS | IMPORTS | ASS | WITHS | PASS;
VAR_FIRST -> ALPHABET | _;
ALPHANUM -> ALPHANUM ALPHANUM | NUM | VAR_FIRST;
VAR -> VAR_FIRST ALPHANUM | VAR_FIRST;
NUMBER -> NUMBER NUMBER | NUM;
NOTX -> not;
TRUEX -> true;
FALSEX -> false;
IFS -> if;
ELIFX -> elif;
ELSEX -> else;
BREAKX -> break;
CONTINUEX -> continue;
WHILEX -> while;
RANGEX -> range;
DEFX -> def;
RETURN -> return;
CLASSS -> class;
RAISES -> raise;
FROMS -> from;
IMPORTS -> import;
ASS -> as;
STRING_WORD -> STRING_WORD STRING_WORD | ALPHABET | NUM | OTHER | SYNTAX;
VALUE -> NUMBER | BOOLEAN | STRING | ARRAY | DICT | FUNCTION | VV OP VV | ( VV ) | none;
VV -> VV , VV | VALUE | VAR;
BOOLEAN -> BOOLEAN and BOOLEAN | BOOLEAN or BOOLEAN | NOTX BOOLEAN | VV RELATION VV | TRUEX | FALSEX | ( BOOLEAN ) | VAR | NUMBER | FUNCTION;
OP -> + | - | * | / | / / | * * | %;
EXPRESSION -> BOOLEAN | ( BOOLEAN );
RELATION -> > = | < = | = = | ! = | < | > | is | is NOTX | in | NOTX in;
STRING -> STRING STRING | " STRING_WORD " | ' STRING_WORD ';
ARRAY -> [ VV ] | [ ] | [ VV for VAR in VV ] | [ VV for VAR in RANGE ];
DICT -> { } | { DICT_CONTENT };
DICT_CONTENT -> VV : VV | DICT_CONTENT , DICT_CONTENT;
COMMENT -> " " " STRING_WORD " " " | ' ' ' STRING_WORD ' ' ';
IF_HEADER -> IFS EXPRESSION :;
IF -> IF_HEADER SS | IF ELIF | IF ELSE | IF_HEADER BREAKX | IF_HEADER CONTINUEX;
ELIF_HEADER -> ELIFX EXPRESSION :;
ELIF -> ELIF_HEADER SS | ELIF ELIF | ELIF ELSE | ELIF_HEADER BREAKX | ELIF_HEADER CONTINUEX;
ELSE -> ELSEX : SS | ELSEX : BREAKX | ELSEX : CONTINUEX;
WHILE_HEADER -> WHILEX EXPRESSION :;
WHILE -> WHILE_HEADER SS;
FOR_HEADER -> for FOR_VAR in ITERABLE :;
FOR_VAR -> VAR | VAR , FOR_VAR;
ITERABLE -> RANGEX ( VV ) | ( DICT ) | DICT | ( ARRAY ) | ARRAY | STRING | FUNCTION;
FOR -> FOR_HEADER SS;
ITERATE -> FOR_HEADER | WHILE_HEADER | FOR | WHILE;
BREAK -> ITERATE BREAKX | ITERATE BREAKX SS;
CONTINUE -> ITERATE CONTINUEX | ITERATE CONTINUEX SS;
PASS -> pass;
FUNCTION -> VAR ( VV ) | VAR ( );
DEF_HEADER -> DEFX VAR ( VV ) : | DEFX VAR ( ) :;
DEF_S -> DEF_S DEF_S | FUNC_BODY;
FUNC_BODY -> FUNC_BODY FUNC_BODY | IF_FUNC | FOR_FUNC | WHILE_FUNC | CONTINUE_FUNC | BREAK_FUNC | CLASS | DEF | VAR = VV | VAR OP = VV | IMPORT | FUNCTION | RAISE | WITH_FUNC | PASS | RETURN | COMMENT | none;
DEF -> DEF_HEADER DEF_S | DEF_HEADER FUNC_BODY;
RETURN -> RETURN BOOLEAN | RETURN VV | RETURN;
IF_FUNC -> IF_HEADER FUNC_BODY | IF_FUNC ELIF_FUNC | IF_FUNC ELSE_FUNC;
ELIF_FUNC -> ELIF_HEADER FUNC_BODY | ELIF_FUNC ELIF_FUNC | ELIF_FUNC ELSE_FUNC;
ELSE_FUNC -> ELSEX : FUNC_BODY;
FOR_FUNC -> FOR_HEADER FUNC_BODY;
WHILE_FUNC -> WHILE_HEADER FUNC_BODY;
ITERATE_FUNC -> FOR_FUNC | WHILE_FUNC | WHILE_HEADER | FOR_HEADER;
CONTINUE_FUNC -> ITERATE_FUNC CONTINUEX | ITERATE_FUNC CONTINUEX FUNC_BODY;
BREAK_FUNC -> ITERATE_FUNC BREAKX | ITERATE_FUNC BREAKX FUNC_BODY;
WITH_FUNC -> WITH_HEADER FUNC_BODY;
RAISE -> RAISES FUNCTION | RAISES ( );
CLASS_HEADER -> CLASSS VAR : | CLASSS VAR ( VV ) : | CLASSS VAR ( ) :;
CLASS_S -> CLASS_S CLASS_S | IF | WHILE | FOR | CLASS | DEF | FUNCTION | VAR = VV | VAR OP = VV | BREAK | CONTINUE | PASS | COMMENT;
CLASS -> CLASS_HEADER CLASS_S;
IMPORT -> FROMS VAR IMPORTS IMP_S | IMPORTS VAR ASS VAR | IMPORTS VAR;
IMP_S -> * | VAR ASS VAR | VAR;
WITH_HEADER -> WITHS FUNCTION ASS VAR :;
WITH -> WITH_HEADER SS;
WITHS -> with